{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Saralin\\\\IdeaProjects\\\\fullstack-typescript-mern-todo\\\\client\\\\src\\\\components\\\\TodoItem.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { getLongestName, getSize } from \"../API\";\nimport './TodoItem.css';\nimport Timer from \"./Timer\";\nimport Slider from \"./Slider\"; // type Props = TodoProps & {\n//     index: number\n//     active: boolean\n//     done: boolean\n//     percent: number\n//     callbackFromParent(listInfo:number): void\n// }\n\nconst Todo = props => {\n  const [realTime, setTime] = useState(0); // const minuteTime = Math.floor(realTime/60);\n\n  const minuteTime = realTime;\n  let totalOver = minuteTime - props.todo.time > 0 ? minuteTime - props.todo.time : 0;\n\n  const timeCallback = timerTime => {\n    setTime(timerTime);\n  };\n\n  const someFn = () => {\n    props.callbackFromParent2(realTime);\n  };\n\n  useEffect(() => {\n    someFn();\n  });\n  const [longest, setLong] = useState(0);\n  const [, setSize] = useState(0);\n  const [color, setColor] = useState('rgb(198,246,241)');\n  useEffect(() => {\n    handleColor();\n    handleLongest();\n    handleSize();\n  });\n\n  const handleColor = () => {\n    const diff = minuteTime - props.todo.time;\n\n    if (Math.abs(diff) <= 1) {\n      setColor('rgb(198,246,241)');\n    } else if (diff > 4) {\n      setColor('rgb(255,125,255)');\n    } else if (diff > 1) {\n      setColor('rgb(255,202,255)');\n    }\n  };\n\n  const handleLongest = () => {\n    getLongestName().then(({\n      data: {\n        longest\n      }\n    }) => setLong(longest)).catch(err => console.log(err));\n  };\n\n  const handleSize = () => {\n    getSize().then(({\n      data: {\n        sizeArr\n      }\n    }) => setSize(sizeArr)).catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    handleOvertime();\n  });\n\n  function handleOvertime() {\n    totalOver = minuteTime - props.todo.time;\n  }\n\n  return /*#__PURE__*/React.createElement(Draggable, {\n    draggableId: props.todo._id,\n    index: props.index,\n    isDragDisabled: props.done || props.active,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, provided => {\n    const style = {\n      // height: (minuteTime < todo.time) ? (todo.time/sizeArr)*100+ '%':((todo.time+totalOver)/(sizeArr))*100+ '%',\n      height: props.todo.time < 2 ? '4%' : props.percent + '%',\n      textDecoration: props.done ? 'line-through' : 'none',\n      color: props.done ? 'grey' : '',\n      ...provided.draggableProps.style\n    };\n    return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n      className: \"Card\",\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Slider, {\n      start: props.active,\n      time: minuteTime < props.todo.time ? props.todo.time : 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: minuteTime < props.todo.time ? \"Card--text\" : \"Card--reverse\",\n      style: {\n        animationDuration: props.todo.time\n        /**60*/\n        + 's',\n        animationPlayState: props.active ? 'running' : 'paused',\n        backgroundColor: !props.active && !props.done ? 'rgb(245, 245, 245)' : '' // backgroundPosition: (minuteTime<todo.time) && active ? '0% 100%': '100% 0%',\n        // textDecoration: done ? 'line-through' : 'none',\n\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"name\",\n      style: {\n        width: 50 + 7 * longest + \"px\",\n        backgroundColor: props.done ? color : '',\n        background: !props.active && !props.done ? 'rgba(240, 240, 240,1)' : ''\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 29\n      }\n    }, props.todo.name, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"description\",\n      style: {\n        // paddingBottom: (minuteTime < todo.time) ? (todo.time/sizeArr)+ '%' : todo.time / (sizeArr/2) + (realTime/*/60*/ - todo.time) + '%',\n        backgroundColor: props.done ? 'rgba(240, 240, 240, 1)' : '',\n        background: !props.active && !props.done ? 'rgb(230, 230, 230)' : ''\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 29\n      }\n    }, props.todo.description, \" \", props.todo.extra, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"time\",\n      style: {\n        backgroundColor: props.done ? 'rgba(240, 240, 240, 1)' : ''\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"set-time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 33\n      }\n    }, props.todo.time, \" \", totalOver, \" min\"), /*#__PURE__*/React.createElement(Timer, {\n      callbackFromParent: timeCallback,\n      initialMinute: props.todo.time,\n      active: props.active,\n      done: props.done,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 33\n      }\n    }))));\n  });\n};\n\nexport default Todo;","map":{"version":3,"sources":["C:/Users/Saralin/IdeaProjects/fullstack-typescript-mern-todo/client/src/components/TodoItem.tsx"],"names":["React","useEffect","useState","Draggable","getLongestName","getSize","Timer","Slider","Todo","props","realTime","setTime","minuteTime","totalOver","todo","time","timeCallback","timerTime","someFn","callbackFromParent2","longest","setLong","setSize","color","setColor","handleColor","handleLongest","handleSize","diff","Math","abs","then","data","catch","err","console","log","sizeArr","handleOvertime","_id","index","done","active","provided","style","height","percent","textDecoration","draggableProps","innerRef","dragHandleProps","animationDuration","animationPlayState","backgroundColor","width","background","name","description","extra"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport { Draggable } from 'react-beautiful-dnd'\r\nimport {getLongestName, getSize,} from \"../API\";\r\nimport './TodoItem.css'\r\nimport Timer from \"./Timer\";\r\nimport Slider from \"./Slider\";\r\n\r\n// type Props = TodoProps & {\r\n//     index: number\r\n//     active: boolean\r\n//     done: boolean\r\n//     percent: number\r\n//     callbackFromParent(listInfo:number): void\r\n// }\r\nconst Todo = (props:{ percent:number, todo: ITodo, active:boolean, done:boolean, index:number\r\n    callbackFromParent2(listInfo: number): void;}) => {\r\n    const [realTime, setTime] = useState<number>(0);\r\n    // const minuteTime = Math.floor(realTime/60);\r\n    const minuteTime = realTime;\r\n    let totalOver = minuteTime-props.todo.time > 0 ?minuteTime-props.todo.time: 0 ;\r\n    const timeCallback = (timerTime: number) => {\r\n        setTime(timerTime);\r\n    }\r\n    const someFn = () => {\r\n        props.callbackFromParent2(realTime);\r\n    }\r\n    useEffect(() => {\r\n        someFn()\r\n    },)\r\n    const [longest, setLong] = useState<number>(0);\r\n    const [, setSize] = useState<number>(0);\r\n    const [color, setColor] = useState<string>('rgb(198,246,241)');\r\n    useEffect(() => {\r\n        handleColor()\r\n        handleLongest()\r\n        handleSize()\r\n    },)\r\n    const handleColor = (): void => {\r\n        const diff = minuteTime - props.todo.time\r\n        if (Math.abs(diff) <= 1) {\r\n            setColor('rgb(198,246,241)');\r\n        } else if (diff > 4) {\r\n            setColor('rgb(255,125,255)');\r\n        } else if (diff > 1) {\r\n            setColor('rgb(255,202,255)');\r\n        }\r\n    }\r\n    const handleLongest = (): void => {\r\n        getLongestName()\r\n            .then(({data: {longest}}: number | any) => setLong(longest))\r\n            .catch((err: Error) => console.log(err))\r\n    }\r\n    const handleSize = (): void => {\r\n        getSize()\r\n            .then(({data: {sizeArr}}: number | any) => setSize(sizeArr))\r\n            .catch((err: Error) => console.log(err))\r\n    }\r\n    useEffect(() => {\r\n        handleOvertime()\r\n    });\r\n    function handleOvertime(){\r\n        totalOver = minuteTime - props.todo.time;\r\n    }\r\n    return (\r\n            <Draggable draggableId={props.todo._id} index={props.index} isDragDisabled={props.done || props.active} >\r\n                {provided => {\r\n                    const style = {\r\n                        // height: (minuteTime < todo.time) ? (todo.time/sizeArr)*100+ '%':((todo.time+totalOver)/(sizeArr))*100+ '%',\r\n                        height: props.todo.time < 2? '4%':props.percent + '%',\r\n                        textDecoration: props.done ? 'line-through' : 'none',\r\n                        color: props.done? 'grey':'',\r\n                        ...provided.draggableProps.style,\r\n                    };\r\n                    return (\r\n                    <div className=\"Card\" ref={provided.innerRef}\r\n                         {...provided.draggableProps}\r\n                         {...provided.dragHandleProps} style = {style}>\r\n                        <Slider start={props.active} time={(minuteTime < props.todo.time) ? props.todo.time : 0}/>\r\n                        <div className={(minuteTime < props.todo.time) ? \"Card--text\" : \"Card--reverse\"}\r\n                             style={{\r\n                                 animationDuration: props.todo.time/**60*/ + 's',\r\n                                 animationPlayState: props.active ? 'running' : 'paused',\r\n                                 backgroundColor: !props.active && !props.done ? 'rgb(245, 245, 245)' : '',\r\n                                 // backgroundPosition: (minuteTime<todo.time) && active ? '0% 100%': '100% 0%',\r\n                                 // textDecoration: done ? 'line-through' : 'none',\r\n                             }}>\r\n                            <div className='name'\r\n                                 style={{\r\n                                     width: 50 + 7 * longest + \"px\", backgroundColor: props.done ? color : '',\r\n                                     background: !props.active && !props.done ? 'rgba(240, 240, 240,1)' : '',\r\n                                 }}>\r\n                                {props.todo.name} </div>\r\n                            <div className='description' style={{\r\n                                // paddingBottom: (minuteTime < todo.time) ? (todo.time/sizeArr)+ '%' : todo.time / (sizeArr/2) + (realTime/*/60*/ - todo.time) + '%',\r\n                                backgroundColor: props.done ? 'rgba(240, 240, 240, 1)' : '',\r\n                                background: !props.active && !props.done ? 'rgb(230, 230, 230)' : '',\r\n                            }}>{props.todo.description} {props.todo.extra} </div>\r\n                            <div className=\"time\" style={{backgroundColor: props.done ? 'rgba(240, 240, 240, 1)' : ''}}>\r\n                                <div className=\"set-time\" >\r\n                                    {props.todo.time} {totalOver} min\r\n                                </div>\r\n                                <Timer callbackFromParent={timeCallback} initialMinute={props.todo.time} active={props.active}\r\n                                       done={props.done}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                )}}\r\n            </Draggable>\r\n    )\r\n}\r\nexport default Todo\r\n"]},"metadata":{},"sourceType":"module"}