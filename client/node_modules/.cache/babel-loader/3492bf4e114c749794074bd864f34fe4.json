{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Saralin\\\\IdeaProjects\\\\fullstack-typescript-mern-todo\\\\client\\\\src\\\\App.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport TodoItem from './components/TodoItem';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { getTodos } from './API';\nimport BonusItem from \"./components/BonusItem\"; // @ts-ignore\n\nconst useKeyPress = function (targetKey) {\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  function downHandler({\n    key\n  }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  const upHandler = ({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  React.useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  });\n  return keyPressed;\n};\n\nconst App = () => {\n  const downPress = useKeyPress(\"ArrowDown\");\n  const upPress = useKeyPress(\"ArrowUp\"); //time used to minimize the bonus time (from people going overtime)\n\n  const [bonusLost, setBonusLost] = useState(0);\n  const [todos, setTodos] = useState([]);\n  const [selected, setSelected] = useState();\n  const [before, setBefore] = useState();\n  const [cursor, setCursor] = useState(-1);\n  const [realTime, setTime] = useState(0);\n  const [nonZeroTime, setZero] = useState(0);\n  let origBonus = 0;\n  const [bonusTime, setBonus] = useState(origBonus);\n\n  const timeCallback = timerTime => {\n    if (timerTime != 0) {\n      setZero(timerTime);\n    }\n\n    setTime(timerTime);\n  };\n\n  useEffect(() => {\n    if (selected !== undefined) {\n      //if person goes overtime\n      if (realTime > Math.round(selected.time - selected.extra)) {\n        //increase selected.overtime so their box increases in size\n        selected.overtime = realTime - Math.round(selected.time - selected.extra); //decrease other slots if bonusTime == 0\n\n        if (bonusTime < 1) {\n          let reducedSlot = cursor + selected.overtime - bonusLost;\n\n          while (reducedSlot >= todos.length) {\n            reducedSlot -= todos.length - cursor - 1;\n          }\n\n          todos[reducedSlot].extra += 1;\n        } else {\n          //decrease bonusTime\n          setBonusLost(bonusLost + 1);\n          setBonus(bonusTime - 1);\n        }\n      }\n    }\n  });\n\n  const getTodoTime = () => {\n    let todoTime = 0;\n\n    for (let i = 0; i < todos.length; i++) {\n      todoTime += todos[i].time;\n    }\n\n    return todoTime;\n  };\n\n  const getPercent = todo => {\n    let percent = (todo.time + todo.overtime - todo.extra) / todoTime * 100;\n\n    if (percent < 3 / todoTime * 100) {\n      return 3 / todoTime * 100;\n    }\n\n    return percent;\n  };\n\n  const isSlotDecreased = () => {\n    for (let i = cursor + 1; i < todos.length; i++) {\n      if (todos[i].extra > 0) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  let todoTime = getTodoTime();\n  let slotDecreased = isSlotDecreased();\n  useEffect(() => {\n    if (downPress) {\n      // let trumpetSound = new Audio(audio);\n      // if(cursor == -1){trumpetSound.play()}\n      setBonusLost(0);\n\n      if (selected !== undefined) {\n        //if person takes less than set time\n        if (nonZeroTime < selected.time - selected.extra) {\n          let difference = selected.time - selected.extra - nonZeroTime; //increase subsequent slots that are under time (until they are back to their set times)\n\n          if (slotDecreased) {\n            for (let i = cursor + 1; i < todos.length; i++) {\n              if (difference > 0 && slotDecreased) {\n                todos[i].extra -= 1;\n                difference -= 1;\n              }\n            }\n          } else {\n            setBonus(bonusTime + difference);\n          }\n\n          selected.extra += selected.time - nonZeroTime; // selected.time = nonZeroTime;\n        }\n      }\n\n      if (cursor < todos.length) {\n        setCursor(prevState => prevState < todos.length ? prevState + 1 : prevState);\n      } else {\n        setCursor(todos.length + 1);\n      }\n\n      setBefore(todos[cursor]);\n      setSelected(todos[cursor + 1]);\n    }\n  }, [downPress]);\n  useEffect(() => {\n    if (upPress) {\n      if (cursor === 0) {\n        window.location.reload();\n      }\n\n      setBefore(todos[cursor - 2]);\n\n      if (before !== undefined) {\n        let difference = before.initTime - before.time; //if slot before took less than designated time\n\n        if (difference > 0) {\n          before.time = before.initTime;\n\n          if (slotDecreased) {\n            for (let i = cursor + 1; i < todos.length; i++) {\n              let addedTime = todos[i].extra + difference / (todos.length - cursor - 1);\n\n              if (addedTime <= 0) {\n                // todos[i].overtime -= todos[i].extra\n                setBonus(origBonus + addedTime);\n              } else {\n                todos[i].extra = addedTime;\n              }\n            }\n          } else {\n            setBonus(bonusTime - difference);\n          }\n        }\n      }\n\n      setCursor(prevState => prevState > 0 ? prevState - 1 : prevState);\n      setSelected(todos[cursor - 1]);\n    }\n  }, [upPress]);\n\n  const onDragEnd = ({\n    source,\n    destination\n  }) => {\n    // Make sure we have a valid destination\n    if (destination === undefined || destination === null || destination.index < source.index && destination.index <= cursor) return null; // Make sure we're actually moving the item\n\n    if (destination.index === source.index) return null; // Move the item within the list\n    // Start by making a new list without the dragged item\n\n    const newList = todos.filter((_, idx) => idx !== source.index); // Then insert the item at the right location\n\n    newList.splice(destination.index, 0, todos[source.index]); // Update the list\n\n    setTodos(newList);\n  };\n\n  const fetchTodos = () => {\n    getTodos().then(({\n      data: {\n        todos\n      }\n    }) => setTodos(todos)).catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n  return /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"main\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"test\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: \"col-1\",\n    isDropDisabled: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 21\n    }\n  }, provided => {\n    const style = {\n      // height: (todoTime + totalOver)/(todoTime) + '%' ,\n      color: 'black',\n      ...provided.droppableProps\n    };\n    return /*#__PURE__*/React.createElement(\"ul\", Object.assign({\n      className: \"characters\"\n    }, provided.droppableProps, {\n      ref: provided.innerRef,\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 33\n      }\n    }), todos.map((todo, index) => /*#__PURE__*/React.createElement(TodoItem, {\n      key: todo._id,\n      todo: todo,\n      index: index,\n      active: index === cursor,\n      done: index < cursor,\n      callbackFromParent2: timeCallback,\n      percent: getPercent(todo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 41\n      }\n    })), provided.placeholder);\n  }), /*#__PURE__*/React.createElement(BonusItem, {\n    origBonus: origBonus,\n    time: bonusTime,\n    active: cursor === todos.length,\n    done: cursor === todos.length + 1,\n    percent: bonusTime / (todoTime + bonusTime) * 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 17\n    }\n  }, \" Settings\")));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Saralin/IdeaProjects/fullstack-typescript-mern-todo/client/src/App.tsx"],"names":["React","useEffect","useState","TodoItem","DragDropContext","Droppable","getTodos","BonusItem","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","window","addEventListener","removeEventListener","App","downPress","upPress","bonusLost","setBonusLost","todos","setTodos","selected","setSelected","before","setBefore","cursor","setCursor","realTime","setTime","nonZeroTime","setZero","origBonus","bonusTime","setBonus","timeCallback","timerTime","undefined","Math","round","time","extra","overtime","reducedSlot","length","getTodoTime","todoTime","i","getPercent","todo","percent","isSlotDecreased","slotDecreased","difference","prevState","location","reload","initTime","addedTime","onDragEnd","source","destination","index","newList","filter","_","idx","splice","fetchTodos","then","data","catch","err","console","log","provided","style","color","droppableProps","innerRef","map","_id","placeholder"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport TodoItem from './components/TodoItem'\r\nimport {DragDropContext, Droppable, DropResult} from 'react-beautiful-dnd'\r\nimport {getTodos,} from './API'\r\nimport BonusItem from \"./components/BonusItem\";\r\n// @ts-ignore\r\nimport audio from './boop.mp3';\r\nconst useKeyPress = function(targetKey: string) {\r\n    const [keyPressed, setKeyPressed] = useState(false);\r\n\r\n    function downHandler({ key }: { key: string }) {\r\n        if (key === targetKey) {\r\n            setKeyPressed(true);\r\n        }\r\n    }\r\n    const upHandler = ({ key }: { key: string }) => {\r\n        if (key === targetKey) {\r\n            setKeyPressed(false);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        window.addEventListener(\"keydown\", downHandler);\r\n        window.addEventListener(\"keyup\", upHandler);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", downHandler);\r\n            window.removeEventListener(\"keyup\", upHandler);\r\n        };\r\n    });\r\n\r\n    return keyPressed;\r\n};\r\n\r\nconst App: React.FC = () => {\r\n    const downPress = useKeyPress(\"ArrowDown\");\r\n    const upPress = useKeyPress(\"ArrowUp\");\r\n\r\n    //time used to minimize the bonus time (from people going overtime)\r\n    const [bonusLost, setBonusLost] = useState<number>(0);\r\n\r\n    const [todos, setTodos] = useState<ITodo[]>([]);\r\n    const [selected, setSelected] = useState<ITodo>();\r\n    const [before, setBefore] = useState<ITodo>();\r\n\r\n    const [cursor, setCursor] = useState<number>(-1);\r\n\r\n    const [realTime, setTime] = useState<number>(0);\r\n    const [nonZeroTime, setZero] = useState<number>(0);\r\n\r\n    let origBonus = 0;\r\n    const [bonusTime, setBonus] = useState<number>(origBonus);\r\n\r\n    const timeCallback = (timerTime: number) => {\r\n        if(timerTime != 0){setZero(timerTime)}\r\n        setTime(timerTime);\r\n    }\r\n    useEffect(() => {\r\n        if (selected !== undefined) {\r\n            //if person goes overtime\r\n            if (realTime > Math.round(selected.time - selected.extra)) {\r\n                //increase selected.overtime so their box increases in size\r\n                selected.overtime = (realTime - Math.round(selected.time - selected.extra));\r\n                //decrease other slots if bonusTime == 0\r\n                if (bonusTime < 1) {\r\n                    let reducedSlot = cursor + selected.overtime - bonusLost;\r\n                    while(reducedSlot >= todos.length ){reducedSlot -= todos.length-cursor-1}\r\n                    todos[reducedSlot].extra += 1;\r\n                } else{ //decrease bonusTime\r\n                    setBonusLost(bonusLost+1);\r\n                    setBonus(bonusTime - 1)\r\n                }\r\n            }\r\n        }\r\n    })\r\n    const getTodoTime = (): number => {\r\n        let todoTime = 0;\r\n        for (let i = 0; i < todos.length; i++) {\r\n            todoTime += todos[i].time;\r\n        }\r\n        return todoTime;\r\n    }\r\n\r\n    const getPercent = (todo: ITodo): number => {\r\n        let percent = (todo.time + todo.overtime - todo.extra) / (todoTime) * 100\r\n        if(percent<(3/(todoTime) * 100)){\r\n            return (3/(todoTime) * 100);\r\n        }\r\n        return percent;\r\n    }\r\n\r\n    const isSlotDecreased = (): boolean => {\r\n        for (let i = cursor + 1; i < todos.length; i++) {\r\n            if(todos[i].extra>0){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    let todoTime = getTodoTime();\r\n    let slotDecreased = isSlotDecreased();\r\n\r\n    useEffect(() => {\r\n        if (downPress) {\r\n            // let trumpetSound = new Audio(audio);\r\n            // if(cursor == -1){trumpetSound.play()}\r\n            setBonusLost(0)\r\n\r\n            if(selected !== undefined) {\r\n                //if person takes less than set time\r\n                if (nonZeroTime < (selected.time-selected.extra)) {\r\n                    let difference = selected.time-selected.extra - nonZeroTime;\r\n                    //increase subsequent slots that are under time (until they are back to their set times)\r\n                    if (slotDecreased){\r\n                        for (let i = cursor + 1; i < todos.length; i++) {\r\n                            if(difference>0 && slotDecreased){\r\n                            todos[i].extra -= 1;\r\n                            difference -= 1; }\r\n                    } }else {\r\n                        setBonus(bonusTime + difference);\r\n                    }\r\n                    selected.extra += selected.time-nonZeroTime\r\n                    // selected.time = nonZeroTime;\r\n                }\r\n            }\r\n\r\n            if (cursor < todos.length) {\r\n                setCursor(prevState =>\r\n                    prevState < todos.length ? prevState + 1 : prevState)\r\n            } else {\r\n                setCursor(todos.length + 1);\r\n            }\r\n            setBefore(todos[cursor])\r\n            setSelected(todos[cursor + 1]);\r\n        }\r\n    }, [downPress]);\r\n\r\n    useEffect(() => {\r\n        if (upPress) {\r\n            if(cursor === 0){\r\n                window.location.reload();\r\n            }\r\n            setBefore(todos[cursor-2])\r\n            if(before !== undefined){\r\n                let difference = before.initTime - before.time;\r\n                //if slot before took less than designated time\r\n                if(difference>0){\r\n                    before.time = before.initTime;\r\n                    if (slotDecreased) {\r\n                        for (let i = cursor + 1; i < todos.length; i++) {\r\n                            let addedTime = todos[i].extra + (difference) / (todos.length - cursor - 1);\r\n                            if(addedTime <= 0){\r\n                                // todos[i].overtime -= todos[i].extra\r\n                                setBonus(origBonus + (addedTime));\r\n                            }\r\n                            else{todos[i].extra = addedTime}\r\n                        }\r\n                    } else {\r\n                        setBonus(bonusTime - (difference));\r\n                    }\r\n                }\r\n                }\r\n            setCursor(prevState => (prevState > 0 ? prevState - 1 : prevState));\r\n            setSelected(todos[cursor-1]);\r\n        }\r\n    }, [upPress]);\r\n\r\n\r\n    const onDragEnd = ({source, destination}: DropResult) => {\r\n        // Make sure we have a valid destination\r\n        if (destination === undefined || destination === null ||\r\n            destination.index < source.index && destination.index <= cursor) return null\r\n        // Make sure we're actually moving the item\r\n        if (destination.index === source.index) return null\r\n        // Move the item within the list\r\n        // Start by making a new list without the dragged item\r\n        const newList = todos.filter((_: any, idx: number) => idx !== source.index)\r\n        // Then insert the item at the right location\r\n        newList.splice(destination.index, 0, todos[source.index])\r\n        // Update the list\r\n        setTodos(newList)\r\n    }\r\n\r\n    const fetchTodos = (): void => {\r\n        getTodos()\r\n            .then(({data: {todos}}: ITodo[] | any) => setTodos(todos))\r\n            .catch((err: Error) => console.log(err))\r\n    }\r\n    useEffect(() => {\r\n        fetchTodos();\r\n    }, [])\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <main className='App'>\r\n                <div className='test'>\r\n                    <Droppable droppableId='col-1' isDropDisabled={false}>\r\n                        {provided => {\r\n                            const style = {\r\n                                // height: (todoTime + totalOver)/(todoTime) + '%' ,\r\n                                color: 'black',\r\n                                ...provided.droppableProps,\r\n                            };\r\n                            return (\r\n                                <ul className=\"characters\"\r\n                                    {...provided.droppableProps} ref={provided.innerRef} style={style}>\r\n                                    {todos.map((todo: ITodo, index) => (\r\n                                        <TodoItem\r\n                                            key={todo._id}\r\n                                            todo={todo}\r\n                                            index={index}\r\n                                            active={index === cursor}\r\n                                            done={index < cursor }\r\n                                            callbackFromParent2={timeCallback}\r\n                                            percent={getPercent(todo)}\r\n                                        />\r\n                                    ))}\r\n                                    {provided.placeholder}\r\n                                </ul>)\r\n                        }}\r\n                    </Droppable>\r\n                    <BonusItem\r\n                        origBonus={origBonus} time={bonusTime} active={cursor === todos.length} done={cursor === todos.length + 1}\r\n                        percent={bonusTime / (todoTime + bonusTime) * 100}/>\r\n                </div>\r\n                <button className=\"button\"> Settings</button>\r\n            </main>\r\n        </DragDropContext>\r\n    )\r\n}\r\n\r\nexport default App\r\n"]},"metadata":{},"sourceType":"module"}