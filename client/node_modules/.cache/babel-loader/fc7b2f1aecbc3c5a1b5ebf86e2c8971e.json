{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Saralin\\\\IdeaProjects\\\\fullstack-typescript-mern-todo\\\\client\\\\src\\\\App.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport TodoItem from './components/TodoItem';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { getTodos } from './API';\nimport BonusItem from \"./components/BonusItem\"; // @ts-ignore\n\nconst useKeyPress = function (targetKey) {\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  function downHandler({\n    key\n  }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  const upHandler = ({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  React.useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  });\n  return keyPressed;\n};\n\nconst App = () => {\n  const downPress = useKeyPress(\"ArrowDown\");\n  const upPress = useKeyPress(\"ArrowUp\");\n  const [todos, setTodos] = useState([]);\n  const [selected, setSelected] = useState();\n  const [before, setBefore] = useState();\n  const [cursor, setCursor] = useState(-1);\n  const [realTime, setTime] = useState(0);\n  const [nonZeroTime, setZero] = useState(0); //amount bonusTime decreases before decreasing meeting slots\n\n  const [initBonus, setInitBonus] = useState(0); //number of slots skipped before reaching a non-zero one\n\n  const [skippedSlots, setSkippedSlots] = useState(0);\n  let origBonus = 0;\n  const [bonusTime, setBonus] = useState(origBonus);\n\n  const timeCallback = timerTime => {\n    if (timerTime != 0) {\n      setZero(timerTime);\n    }\n\n    setTime(timerTime);\n  };\n\n  useEffect(() => {\n    if (selected !== undefined) {\n      //if person goes overtime\n      if (realTime > Math.round(selected.time - selected.extra) && !(cursor === todos.length - 1 && bonusTime <= 0)) {\n        //increase selected.overtime so their box increases in size\n        //only increase box when there is bonusTime or other people's time left to take from\n        if (isPercentLeft()) selected.overtime = realTime - Math.round(selected.time - selected.extra); //decrease other slots if bonusTime == 0\n\n        if (cursor != todos.length - 1 || bonusTime > 0) {\n          if (bonusTime < 1) {\n            let reducedSlot = cursor + selected.overtime - initBonus;\n\n            while (reducedSlot >= todos.length) {\n              reducedSlot -= todos.length - cursor - 1;\n            } // todos[1].name = reducedSlot.toString()\n\n\n            while (todos[reducedSlot].time == 1 && isTimeLeft()) {\n              reducedSlot += 1;\n              setSkippedSlots(skippedSlots + 1);\n\n              while (reducedSlot >= todos.length) {\n                reducedSlot -= todos.length - cursor - 1 + skippedSlots;\n              }\n            }\n\n            todos[reducedSlot].time > 1 ? todos[reducedSlot].time -= 1 : todos[reducedSlot].time = 1;\n          } else {\n            //decrease bonusTime\n            setBonus(bonusTime - 1);\n            setInitBonus(initBonus + 1);\n          }\n        }\n      }\n    }\n  });\n\n  const getTodoTime = () => {\n    let todoTime = 0;\n\n    for (let i = 0; i < todos.length; i++) {\n      todoTime += todos[i].time + todos[i].overtime - todos[i].extra;\n    }\n\n    return todoTime;\n  };\n\n  const getPercent = todo => {\n    let percent = todo.time - todo.extra + todo.overtime; // if(isPercentLeft()){ percent = todo.time - todo.extra + todo.overtime}\n\n    percent = percent / (todoTime + bonusTime) * 100;\n\n    if (percent < 6.5) {\n      return 6.5;\n    }\n\n    return percent;\n  };\n\n  const isPercentLeft = () => {\n    for (let i = cursor + 1; i < todos.length; i++) {\n      if (getPercent(todos[i]) > 6.5) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const isTimeLeft = () => {\n    for (let i = cursor + 1; i < todos.length; i++) {\n      if (todos[i].time != 1) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const isSlotDecreased = () => {\n    let numDecreased = 0;\n\n    for (let i = cursor + 1; i < todos.length; i++) {\n      if (todos[i].initTime > todos[i].time) {\n        numDecreased += todos[i].initTime - todos[i].time;\n      }\n    }\n\n    return numDecreased;\n  };\n\n  let todoTime = getTodoTime();\n  let slotDecreased = isSlotDecreased();\n  useEffect(() => {\n    if (downPress) {\n      // let trumpetSound = new Audio(audio);\n      // if(cursor == -1){trumpetSound.play()}\n      setInitBonus(0);\n\n      if (selected !== undefined) {\n        //if person takes less than set time\n        if (selected.overtime == 0 && nonZeroTime < selected.time) {\n          let difference = selected.time - nonZeroTime;\n          let subtract = Math.floor(slotDecreased / difference);\n\n          for (let i = cursor + 1; i < todos.length; i++) {\n            todos[i].time += subtract;\n            difference -= subtract;\n          } //increase subsequent slots that are under time (until they are back to their set times)\n\n\n          if (slotDecreased > 0) {\n            for (let i = cursor + 1; i < todos.length; i++) {\n              while (difference > 0 && todos[i].time < todos[i].initTime) {\n                todos[i].time += 1;\n                difference -= 1;\n              }\n            }\n          } else {\n            setBonus(bonusTime + difference);\n          }\n\n          selected.extra += selected.time - nonZeroTime; // selected.time = nonZeroTime;\n        }\n      }\n\n      if (cursor < todos.length) {\n        setCursor(prevState => prevState < todos.length ? prevState + 1 : prevState);\n      } else {\n        setCursor(todos.length + 1);\n      }\n\n      setBefore(todos[cursor]);\n      setSelected(todos[cursor + 1]);\n    }\n  }, [downPress]);\n  useEffect(() => {\n    if (upPress) {\n      if (cursor === 0) {\n        window.location.reload();\n      }\n\n      setBefore(todos[cursor - 2]);\n\n      if (before !== undefined) {\n        //if slot before took less than designated time\n        if (before.extra > 0) {\n          let difference = before.extra;\n          before.extra = 0;\n          let subtract = Math.floor(slotDecreased / difference);\n\n          for (let i = cursor + 1; i < todos.length; i++) {\n            todos[i].time -= subtract;\n            difference -= subtract;\n          } //increase subsequent slots that are under time (until they are back to their set times)\n\n\n          if (slotDecreased > 0) {\n            for (let i = cursor + 1; i < todos.length; i++) {\n              while (difference > 0 && todos[i].time < todos[i].initTime) {\n                todos[i].time -= 1;\n                difference -= 1;\n              }\n            }\n          } else {\n            setBonus(bonusTime - difference);\n          } // selected.time = nonZeroTime;\n\n        }\n      }\n\n      setCursor(prevState => prevState > 0 ? prevState - 1 : prevState);\n      setSelected(todos[cursor - 1]);\n    }\n  }, [upPress]);\n\n  const onDragEnd = ({\n    source,\n    destination\n  }) => {\n    // Make sure we have a valid destination\n    if (destination === undefined || destination === null || destination.index < source.index && destination.index <= cursor) return null; // Make sure we're actually moving the item\n\n    if (destination.index === source.index) return null; // Move the item within the list\n    // Start by making a new list without the dragged item\n\n    const newList = todos.filter((_, idx) => idx !== source.index); // Then insert the item at the right location\n\n    newList.splice(destination.index, 0, todos[source.index]); // Update the list\n\n    setTodos(newList);\n  };\n\n  const fetchTodos = () => {\n    getTodos().then(({\n      data: {\n        todos\n      }\n    }) => setTodos(todos)).catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n  return /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"main\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"test\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: \"col-1\",\n    isDropDisabled: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 21\n    }\n  }, provided => {\n    const style = {\n      // height: (todoTime - ((bonusTime) / (todoTime+bonusTime) * 100))/(todoTime) + '%' ,\n      color: 'black',\n      ...provided.droppableProps\n    };\n    return /*#__PURE__*/React.createElement(\"ul\", Object.assign({\n      className: \"characters\"\n    }, provided.droppableProps, {\n      ref: provided.innerRef,\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 33\n      }\n    }), todos.map((todo, index) => /*#__PURE__*/React.createElement(TodoItem, {\n      key: todo._id,\n      todo: todo,\n      index: index,\n      active: index === cursor,\n      done: index < cursor,\n      callbackFromParent2: timeCallback,\n      percent: getPercent(todo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 41\n      }\n    })), provided.placeholder, /*#__PURE__*/React.createElement(BonusItem, {\n      origBonus: origBonus,\n      time: bonusTime,\n      active: cursor === todos.length,\n      done: cursor === todos.length + 1,\n      percent: bonusTime / (todoTime + bonusTime) * 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 37\n      }\n    }));\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 17\n    }\n  }, \" Settings\")));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Saralin/IdeaProjects/fullstack-typescript-mern-todo/client/src/App.tsx"],"names":["React","useEffect","useState","TodoItem","DragDropContext","Droppable","getTodos","BonusItem","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","window","addEventListener","removeEventListener","App","downPress","upPress","todos","setTodos","selected","setSelected","before","setBefore","cursor","setCursor","realTime","setTime","nonZeroTime","setZero","initBonus","setInitBonus","skippedSlots","setSkippedSlots","origBonus","bonusTime","setBonus","timeCallback","timerTime","undefined","Math","round","time","extra","length","isPercentLeft","overtime","reducedSlot","isTimeLeft","getTodoTime","todoTime","i","getPercent","todo","percent","isSlotDecreased","numDecreased","initTime","slotDecreased","difference","subtract","floor","prevState","location","reload","onDragEnd","source","destination","index","newList","filter","_","idx","splice","fetchTodos","then","data","catch","err","console","log","provided","style","color","droppableProps","innerRef","map","_id","placeholder"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport TodoItem from './components/TodoItem'\r\nimport {DragDropContext, Droppable, DropResult} from 'react-beautiful-dnd'\r\nimport {getTodos,} from './API'\r\nimport BonusItem from \"./components/BonusItem\";\r\n// @ts-ignore\r\nimport audio from './boop.mp3';\r\nconst useKeyPress = function(targetKey: string) {\r\n    const [keyPressed, setKeyPressed] = useState(false);\r\n\r\n    function downHandler({ key }: { key: string }) {\r\n        if (key === targetKey) {\r\n            setKeyPressed(true);\r\n        }\r\n    }\r\n    const upHandler = ({ key }: { key: string }) => {\r\n        if (key === targetKey) {\r\n            setKeyPressed(false);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        window.addEventListener(\"keydown\", downHandler);\r\n        window.addEventListener(\"keyup\", upHandler);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", downHandler);\r\n            window.removeEventListener(\"keyup\", upHandler);\r\n        };\r\n    });\r\n    return keyPressed;\r\n};\r\n\r\nconst App: React.FC = () => {\r\n    const downPress = useKeyPress(\"ArrowDown\");\r\n    const upPress = useKeyPress(\"ArrowUp\");\r\n\r\n\r\n    const [todos, setTodos] = useState<ITodo[]>([]);\r\n    const [selected, setSelected] = useState<ITodo>();\r\n    const [before, setBefore] = useState<ITodo>();\r\n\r\n    const [cursor, setCursor] = useState<number>(-1);\r\n\r\n    const [realTime, setTime] = useState<number>(0);\r\n    const [nonZeroTime, setZero] = useState<number>(0);\r\n\r\n    //amount bonusTime decreases before decreasing meeting slots\r\n    const [initBonus, setInitBonus] = useState<number>(0);\r\n    //number of slots skipped before reaching a non-zero one\r\n    const [skippedSlots, setSkippedSlots] = useState<number>(0);\r\n\r\n    let origBonus = 0;\r\n    const [bonusTime, setBonus] = useState<number>(origBonus);\r\n\r\n    const timeCallback = (timerTime: number) => {\r\n        if(timerTime != 0){setZero(timerTime)}\r\n        setTime(timerTime);\r\n    }\r\n    useEffect(() => {\r\n        if (selected !== undefined) {\r\n            //if person goes overtime\r\n            if (realTime > Math.round(selected.time - selected.extra) && !(cursor===todos.length-1 && bonusTime<=0)) {\r\n                //increase selected.overtime so their box increases in size\r\n                //only increase box when there is bonusTime or other people's time left to take from\r\n                if(isPercentLeft()) selected.overtime = (realTime - Math.round(selected.time - selected.extra));\r\n\r\n                //decrease other slots if bonusTime == 0\r\n                if(cursor != todos.length - 1 || bonusTime >0){\r\n                if (bonusTime < 1) {\r\n                    let reducedSlot = cursor + selected.overtime-initBonus ;\r\n                    while(reducedSlot >= todos.length ){\r\n                        reducedSlot -= todos.length - cursor - 1\r\n                    }\r\n                    // todos[1].name = reducedSlot.toString()\r\n                    while(todos[reducedSlot].time == 1 && isTimeLeft()){\r\n                        reducedSlot +=1;\r\n                        setSkippedSlots(skippedSlots+1)\r\n                        while(reducedSlot >= todos.length){\r\n                            reducedSlot -= todos.length - cursor - 1 + skippedSlots\r\n                        }\r\n                    }\r\n                        todos[reducedSlot].time > 1? todos[reducedSlot].time  -= 1: todos[reducedSlot].time = 1;\r\n                } else{ //decrease bonusTime\r\n                    setBonus(bonusTime - 1)\r\n                    setInitBonus(initBonus + 1)\r\n                }\r\n            }}\r\n        }\r\n    })\r\n    const getTodoTime = (): number => {\r\n        let todoTime = 0;\r\n        for (let i = 0; i < todos.length; i++) {\r\n            todoTime += todos[i].time+todos[i].overtime - todos[i].extra;\r\n        }\r\n        return todoTime;\r\n    }\r\n\r\n    const getPercent = (todo: ITodo): number => {\r\n        let percent = (todo.time - todo.extra+todo.overtime);\r\n        // if(isPercentLeft()){ percent = todo.time - todo.extra + todo.overtime}\r\n        percent = percent/(todoTime+bonusTime)*100\r\n        if(percent<6.5){\r\n            return (6.5);\r\n        }\r\n        return percent;\r\n    }\r\n\r\n    const isPercentLeft = () : boolean => {\r\n        for (let i = cursor + 1; i < todos.length; i++) {\r\n            if (getPercent(todos[i]) > 6.5) {\r\n                return true\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const isTimeLeft = () : boolean => {\r\n        for (let i = cursor + 1; i < todos.length; i++) {\r\n            if(todos[i].time != 1){\r\n                return true}}\r\n        return false;\r\n    }\r\n\r\n\r\n    const isSlotDecreased = (): number => {\r\n        let numDecreased = 0;\r\n        for (let i = cursor + 1; i < todos.length; i++) {\r\n            if(todos[i].initTime>todos[i].time){\r\n            numDecreased += todos[i].initTime-todos[i].time;}\r\n            }\r\n        return numDecreased;\r\n    }\r\n    let todoTime = getTodoTime();\r\n    let slotDecreased = isSlotDecreased();\r\n\r\n    useEffect(() => {\r\n        if (downPress) {\r\n            // let trumpetSound = new Audio(audio);\r\n            // if(cursor == -1){trumpetSound.play()}\r\n            setInitBonus(0)\r\n            if(selected !== undefined) {\r\n                //if person takes less than set time\r\n                if (selected.overtime == 0 && nonZeroTime < (selected.time)) {\r\n                    let difference = selected.time - nonZeroTime;\r\n                    let subtract = Math.floor(slotDecreased/difference)\r\n                    for (let i = cursor + 1; i < todos.length; i++) {\r\n                        todos[i].time += subtract;\r\n                        difference -= subtract;\r\n                    }\r\n                        //increase subsequent slots that are under time (until they are back to their set times)\r\n                    if(slotDecreased>0){\r\n                        for (let i = cursor + 1; i < todos.length; i++) {\r\n                            while(difference > 0 && todos[i].time < todos[i].initTime) {\r\n                                todos[i].time += 1;\r\n                                difference -= 1;\r\n                            }\r\n                        }\r\n                }else{\r\n                    setBonus(bonusTime + difference);}\r\n                    selected.extra += selected.time - nonZeroTime\r\n                    // selected.time = nonZeroTime;\r\n                }\r\n            }\r\n\r\n            if (cursor < todos.length) {\r\n                setCursor(prevState =>\r\n                    prevState < todos.length ? prevState + 1 : prevState)\r\n            } else {\r\n                setCursor(todos.length + 1);\r\n            }\r\n            setBefore(todos[cursor])\r\n            setSelected(todos[cursor + 1]);\r\n        }\r\n    }, [downPress]);\r\n\r\n    useEffect(() => {\r\n        if (upPress) {\r\n            if(cursor === 0){\r\n                window.location.reload();\r\n            }\r\n            setBefore(todos[cursor-2])\r\n            if(before !== undefined) {\r\n                //if slot before took less than designated time\r\n                if (before.extra > 0) {\r\n                    let difference = before.extra;\r\n                    before.extra = 0;\r\n                    let subtract = Math.floor(slotDecreased / difference)\r\n                    for (let i = cursor + 1; i < todos.length; i++) {\r\n                        todos[i].time -= subtract;\r\n                        difference -= subtract;\r\n                    }\r\n                    //increase subsequent slots that are under time (until they are back to their set times)\r\n                    if (slotDecreased > 0) {\r\n                        for (let i = cursor + 1; i < todos.length; i++) {\r\n                            while (difference > 0 && todos[i].time < todos[i].initTime) {\r\n                                todos[i].time -= 1;\r\n                                difference -= 1;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        setBonus(bonusTime - difference);\r\n                    }\r\n                    // selected.time = nonZeroTime;\r\n                }\r\n                }\r\n            setCursor(prevState => (prevState > 0 ? prevState - 1 : prevState));\r\n            setSelected(todos[cursor-1]);\r\n        }\r\n    }, [upPress]);\r\n\r\n\r\n    const onDragEnd = ({source, destination}: DropResult) => {\r\n        // Make sure we have a valid destination\r\n        if (destination === undefined || destination === null ||\r\n            destination.index < source.index && destination.index <= cursor) return null\r\n        // Make sure we're actually moving the item\r\n        if (destination.index === source.index) return null\r\n        // Move the item within the list\r\n        // Start by making a new list without the dragged item\r\n        const newList = todos.filter((_: any, idx: number) => idx !== source.index)\r\n        // Then insert the item at the right location\r\n        newList.splice(destination.index, 0, todos[source.index])\r\n        // Update the list\r\n        setTodos(newList)\r\n    }\r\n\r\n    const fetchTodos = (): void => {\r\n        getTodos()\r\n            .then(({data: {todos}}: ITodo[] | any) => setTodos(todos))\r\n            .catch((err: Error) => console.log(err))\r\n    }\r\n    useEffect(() => {\r\n        fetchTodos();\r\n    }, [])\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <main className='App'>\r\n                <div className='test'>\r\n                    <Droppable droppableId='col-1' isDropDisabled={false}>\r\n                        {provided => {\r\n                            const style = {\r\n                                // height: (todoTime - ((bonusTime) / (todoTime+bonusTime) * 100))/(todoTime) + '%' ,\r\n                                color: 'black',\r\n                                ...provided.droppableProps,\r\n                            };\r\n                            return (\r\n                                <ul className=\"characters\"\r\n                                    {...provided.droppableProps} ref={provided.innerRef} style={style}>\r\n                                    {todos.map((todo: ITodo, index) => (\r\n                                        <TodoItem\r\n                                            key={todo._id}\r\n                                            todo={todo}\r\n                                            index={index}\r\n                                            active={index === cursor}\r\n                                            done={index < cursor }\r\n                                            callbackFromParent2={timeCallback}\r\n                                            percent={getPercent(todo)}\r\n                                        />\r\n                                    ))}\r\n                                    {provided.placeholder}\r\n                                    <BonusItem\r\n                                        origBonus={origBonus} time={bonusTime} active={cursor === todos.length} done={cursor === todos.length + 1}\r\n                                        percent={(bonusTime)/(todoTime + bonusTime)*100 }/>\r\n                                </ul>)\r\n                        }}\r\n\r\n                    </Droppable>\r\n\r\n                </div>\r\n                <button className=\"button\"> Settings</button>\r\n            </main>\r\n        </DragDropContext>\r\n    )\r\n}\r\n\r\nexport default App\r\n"]},"metadata":{},"sourceType":"module"}