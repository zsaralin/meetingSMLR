{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Saralin\\\\IdeaProjects\\\\fullstack-typescript-mern-todo\\\\client\\\\src\\\\App.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport TodoItem from './components/TodoItem';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { getTodos } from './API';\nimport BonusItem from \"./components/BonusItem\";\n\nconst useKeyPress = function (targetKey) {\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  function downHandler({\n    key\n  }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  const upHandler = ({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  React.useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  });\n  return keyPressed;\n};\n\nconst App = () => {\n  const downPress = useKeyPress(\"ArrowDown\");\n  const upPress = useKeyPress(\"ArrowUp\");\n  const [todos, setTodos] = useState([]);\n  const [selected, setSelected] = useState();\n  const [cursor, setCursor] = useState(-1); // const [totalOver, setOver] = useState<number>(0);\n\n  const [realTime, setTime] = useState(0);\n  const [nonZeroTime, setZero] = useState(0);\n  let origBonus = 0;\n  const [bonusTime, setBonus] = useState(origBonus);\n\n  const timeCallback = timerTime => {\n    if (timerTime != 0) {\n      setZero(timerTime);\n    }\n\n    setTime(timerTime);\n  };\n\n  useEffect(() => {\n    if (selected !== undefined) {\n      //if person goes overtime\n      if (realTime > Math.round(selected.time - selected.extra)) {\n        //increase selected.overtime so their box increases in size\n        selected.overtime = realTime - Math.round(selected.time - selected.extra); //decrease other slots if bonusTime == 0\n\n        if (bonusTime < 1) {\n          let length = cursor + 1 + selected.overtime >= todos.length ? todos.length : cursor + 1 + selected.overtime;\n\n          for (let i = cursor + selected.overtime; i < length; i++) {\n            todos[i].extra += 1;\n          } // for (let i = cursor + 1; i < todos.length; i++) {\n          //     todos[i].extra += 1 / (todos.length - cursor - 1);\n          // }\n\n        } else {\n          //decrease bonusTime\n          setBonus(origBonus - totalOver < 0 ? 0 : origBonus - totalOver);\n        }\n      }\n    }\n  });\n\n  const getTodoTime = () => {\n    let todoTime = 0;\n\n    for (let i = 0; i < todos.length; i++) {\n      todoTime += todos[i].time;\n    }\n\n    return todoTime;\n  };\n\n  const getTotalOver = () => {\n    let totalOver = 0;\n\n    for (let i = 0; i < todos.length; i++) {\n      totalOver += todos[i].overtime;\n    }\n\n    return totalOver;\n  };\n\n  const getPercent = todo => {\n    return (todo.time + todo.overtime - todo.extra) / todoTime * 100;\n  };\n\n  const isSlotDecreased = () => {\n    for (let i = cursor + 1; i < todos.length; i++) {\n      if (todos[i].extra > 0) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  let todoTime = getTodoTime();\n  let totalOver = getTotalOver();\n  let slotDecreased = isSlotDecreased();\n  useEffect(() => {\n    if (downPress) {\n      // setTime(0);\n      if (cursor < todos.length) {\n        setCursor(prevState => prevState < todos.length ? prevState + 1 : prevState);\n      } else {\n        setCursor(todos.length + 1);\n      }\n\n      if (selected !== undefined) {\n        //if person takes less than set time\n        if (nonZeroTime < selected.time) {\n          //increase subsequent slots that are under time (until they are back to their set times)\n          if (slotDecreased) {\n            for (let i = cursor + 1; i < todos.length; i++) {\n              let addedTime = todos[i].extra - (selected.time - nonZeroTime) / (todos.length - cursor - 1);\n\n              if (addedTime <= 0) {\n                todos[i].extra = 0;\n                setBonus(origBonus - addedTime);\n              } else {\n                todos[i].extra = addedTime;\n              }\n            }\n          } else {\n            setBonus(origBonus + (selected.time - nonZeroTime));\n          }\n\n          selected.time = nonZeroTime;\n        }\n      }\n\n      setSelected(todos[cursor + 1]);\n      let before = todos[cursor];\n\n      if (before !== undefined) {\n        before.status = false; // if(before.overtime > 0){ before.overtime -= 1}\n      }\n\n      if (selected !== undefined) {\n        selected.status = true;\n      }\n    }\n  }, [downPress]);\n  useEffect(() => {\n    if (upPress) {\n      if (cursor === 0) {\n        window.location.reload();\n      }\n\n      setCursor(prevState => prevState > 0 ? prevState - 1 : prevState);\n      setSelected(todos[cursor - 1]);\n      let before = todos[cursor];\n\n      if (before !== undefined) {\n        before.status = false;\n      }\n\n      if (selected !== undefined) {\n        selected.status = true;\n      }\n    }\n  }, [upPress]);\n\n  const onDragEnd = ({\n    source,\n    destination\n  }) => {\n    // Make sure we have a valid destination\n    if (destination === undefined || destination === null || destination.index < source.index && destination.index <= cursor) return null; // Make sure we're actually moving the item\n\n    if (destination.index === source.index) return null; // Move the item within the list\n    // Start by making a new list without the dragged item\n\n    const newList = todos.filter((_, idx) => idx !== source.index); // Then insert the item at the right location\n\n    newList.splice(destination.index, 0, todos[source.index]); // Update the list\n\n    setTodos(newList);\n  };\n\n  const fetchTodos = () => {\n    getTodos().then(({\n      data: {\n        todos\n      }\n    }) => setTodos(todos)).catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n  return /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"main\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"test\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: \"col-1\",\n    isDropDisabled: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 21\n    }\n  }, provided => {\n    const style = {\n      // height: (todoTime + totalOver)/(todoTime) + '%' ,\n      color: 'black',\n      ...provided.droppableProps\n    };\n    return /*#__PURE__*/React.createElement(\"ul\", Object.assign({\n      className: \"characters\"\n    }, provided.droppableProps, {\n      ref: provided.innerRef,\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 33\n      }\n    }), todos.map((todo, index) => /*#__PURE__*/React.createElement(TodoItem, {\n      key: todo._id,\n      todo: todo,\n      index: index,\n      active: index === cursor,\n      done: index <= cursor - 1,\n      callbackFromParent2: timeCallback,\n      percent: getPercent(todo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 41\n      }\n    })), provided.placeholder);\n  }), /*#__PURE__*/React.createElement(BonusItem, {\n    time: bonusTime,\n    active: cursor === todos.length,\n    done: cursor === todos.length + 1,\n    percent: bonusTime / (todoTime + bonusTime) * 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }\n  }, \" Settings\")));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Saralin/IdeaProjects/fullstack-typescript-mern-todo/client/src/App.tsx"],"names":["React","useEffect","useState","TodoItem","DragDropContext","Droppable","getTodos","BonusItem","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","window","addEventListener","removeEventListener","App","downPress","upPress","todos","setTodos","selected","setSelected","cursor","setCursor","realTime","setTime","nonZeroTime","setZero","origBonus","bonusTime","setBonus","timeCallback","timerTime","undefined","Math","round","time","extra","overtime","length","i","totalOver","getTodoTime","todoTime","getTotalOver","getPercent","todo","isSlotDecreased","slotDecreased","prevState","addedTime","before","status","location","reload","onDragEnd","source","destination","index","newList","filter","_","idx","splice","fetchTodos","then","data","catch","err","console","log","provided","style","color","droppableProps","innerRef","map","_id","placeholder"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAAQC,eAAR,EAAyBC,SAAzB,QAAqD,qBAArD;AACA,SAAQC,QAAR,QAAwB,OAAxB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;;AAEA,MAAMC,WAAW,GAAG,UAASC,SAAT,EAA4B;AAC5C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,KAAD,CAA5C;;AAEA,WAASU,WAAT,CAAqB;AAAEC,IAAAA;AAAF,GAArB,EAA+C;AAC3C,QAAIA,GAAG,KAAKJ,SAAZ,EAAuB;AACnBE,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH;AACJ;;AACD,QAAMG,SAAS,GAAG,CAAC;AAAED,IAAAA;AAAF,GAAD,KAA8B;AAC5C,QAAIA,GAAG,KAAKJ,SAAZ,EAAuB;AACnBE,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH;AACJ,GAJD;;AAMAX,EAAAA,KAAK,CAACC,SAAN,CAAgB,MAAM;AAClBc,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCJ,WAAnC;AACAG,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCF,SAAjC;AAEA,WAAO,MAAM;AACTC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCL,WAAtC;AACAG,MAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCH,SAApC;AACH,KAHD;AAIH,GARD;AAUA,SAAOJ,UAAP;AACH,CAzBD;;AA2BA,MAAMQ,GAAa,GAAG,MAAM;AAExB,QAAMC,SAAS,GAAGX,WAAW,CAAC,WAAD,CAA7B;AACA,QAAMY,OAAO,GAAGZ,WAAW,CAAC,SAAD,CAA3B;AAEA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAU,EAAV,CAAlC;AACA,QAAM,CAACqB,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,EAAxC;AACA,QAAM,CAACuB,MAAD,EAASC,SAAT,IAAsBxB,QAAQ,CAAS,CAAC,CAAV,CAApC,CAPwB,CAQxB;;AAEA,QAAM,CAACyB,QAAD,EAAWC,OAAX,IAAsB1B,QAAQ,CAAS,CAAT,CAApC;AACA,QAAM,CAAC2B,WAAD,EAAcC,OAAd,IAAyB5B,QAAQ,CAAS,CAAT,CAAvC;AAEA,MAAI6B,SAAS,GAAG,CAAhB;AACA,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwB/B,QAAQ,CAAS6B,SAAT,CAAtC;;AAEA,QAAMG,YAAY,GAAIC,SAAD,IAAuB;AACxC,QAAGA,SAAS,IAAI,CAAhB,EAAkB;AAACL,MAAAA,OAAO,CAACK,SAAD,CAAP;AAAmB;;AACtCP,IAAAA,OAAO,CAACO,SAAD,CAAP;AACH,GAHD;;AAIAlC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIsB,QAAQ,KAAKa,SAAjB,EAA4B;AACxB;AACA,UAAIT,QAAQ,GAAGU,IAAI,CAACC,KAAL,CAAWf,QAAQ,CAACgB,IAAT,GAAgBhB,QAAQ,CAACiB,KAApC,CAAf,EAA2D;AACvD;AACAjB,QAAAA,QAAQ,CAACkB,QAAT,GAAqBd,QAAQ,GAAGU,IAAI,CAACC,KAAL,CAAWf,QAAQ,CAACgB,IAAT,GAAgBhB,QAAQ,CAACiB,KAApC,CAAhC,CAFuD,CAGvD;;AACA,YAAIR,SAAS,GAAG,CAAhB,EAAmB;AACf,cAAIU,MAAM,GAAGjB,MAAM,GAAC,CAAP,GAASF,QAAQ,CAACkB,QAAlB,IAA8BpB,KAAK,CAACqB,MAApC,GAA6CrB,KAAK,CAACqB,MAAnD,GAA2DjB,MAAM,GAAG,CAAT,GAAaF,QAAQ,CAACkB,QAA9F;;AACA,eAAK,IAAIE,CAAC,GAAGlB,MAAM,GAAEF,QAAQ,CAACkB,QAA9B,EAAyCE,CAAC,GAAGD,MAA7C,EAAqDC,CAAC,EAAtD,EAA0D;AACtDtB,YAAAA,KAAK,CAACsB,CAAD,CAAL,CAASH,KAAT,IAAiB,CAAjB;AACH,WAJc,CAMf;AACA;AACA;;AACH,SATD,MASM;AAAE;AACJP,UAAAA,QAAQ,CAACF,SAAS,GAACa,SAAV,GAAqB,CAArB,GAAyB,CAAzB,GAA6Bb,SAAS,GAAGa,SAA1C,CAAR;AACH;AACJ;AACJ;AACJ,GArBQ,CAAT;;AAsBA,QAAMC,WAAW,GAAG,MAAc;AAC9B,QAAIC,QAAQ,GAAG,CAAf;;AACA,SAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,KAAK,CAACqB,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACnCG,MAAAA,QAAQ,IAAIzB,KAAK,CAACsB,CAAD,CAAL,CAASJ,IAArB;AACH;;AACD,WAAOO,QAAP;AACH,GAND;;AAOA,QAAMC,YAAY,GAAG,MAAc;AAC/B,QAAIH,SAAS,GAAG,CAAhB;;AACA,SAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,KAAK,CAACqB,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACnCC,MAAAA,SAAS,IAAIvB,KAAK,CAACsB,CAAD,CAAL,CAASF,QAAtB;AACH;;AACD,WAAOG,SAAP;AACH,GAND;;AAQA,QAAMI,UAAU,GAAIC,IAAD,IAAyB;AACxC,WAAO,CAACA,IAAI,CAACV,IAAL,GAAYU,IAAI,CAACR,QAAjB,GAA4BQ,IAAI,CAACT,KAAlC,IAA4CM,QAA5C,GAAwD,GAA/D;AACH,GAFD;;AAIA,QAAMI,eAAe,GAAG,MAAe;AACnC,SAAK,IAAIP,CAAC,GAAGlB,MAAM,GAAG,CAAtB,EAAyBkB,CAAC,GAAGtB,KAAK,CAACqB,MAAnC,EAA2CC,CAAC,EAA5C,EAAgD;AAC5C,UAAGtB,KAAK,CAACsB,CAAD,CAAL,CAASH,KAAT,GAAe,CAAlB,EAAoB;AAChB,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH,GAPD;;AAQA,MAAIM,QAAQ,GAAGD,WAAW,EAA1B;AACA,MAAID,SAAS,GAAGG,YAAY,EAA5B;AACA,MAAII,aAAa,GAAGD,eAAe,EAAnC;AAGAjD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIkB,SAAJ,EAAe;AACX;AACA,UAAIM,MAAM,GAAGJ,KAAK,CAACqB,MAAnB,EAA2B;AACvBhB,QAAAA,SAAS,CAAC0B,SAAS,IACfA,SAAS,GAAG/B,KAAK,CAACqB,MAAlB,GAA2BU,SAAS,GAAG,CAAvC,GAA2CA,SADtC,CAAT;AAEH,OAHD,MAGO;AACH1B,QAAAA,SAAS,CAACL,KAAK,CAACqB,MAAN,GAAe,CAAhB,CAAT;AACH;;AACD,UAAGnB,QAAQ,KAAKa,SAAhB,EAA2B;AACvB;AACA,YAAIP,WAAW,GAAGN,QAAQ,CAACgB,IAA3B,EAAiC;AAC7B;AACA,cAAIY,aAAJ,EAAmB;AACf,iBAAK,IAAIR,CAAC,GAAGlB,MAAM,GAAG,CAAtB,EAAyBkB,CAAC,GAAGtB,KAAK,CAACqB,MAAnC,EAA2CC,CAAC,EAA5C,EAAgD;AAC5C,kBAAIU,SAAS,GAAGhC,KAAK,CAACsB,CAAD,CAAL,CAASH,KAAT,GAAiB,CAACjB,QAAQ,CAACgB,IAAT,GAAgBV,WAAjB,KAAiCR,KAAK,CAACqB,MAAN,GAAejB,MAAf,GAAwB,CAAzD,CAAjC;;AACA,kBAAG4B,SAAS,IAAI,CAAhB,EAAkB;AACdhC,gBAAAA,KAAK,CAACsB,CAAD,CAAL,CAASH,KAAT,GAAiB,CAAjB;AACAP,gBAAAA,QAAQ,CAACF,SAAS,GAAIsB,SAAd,CAAR;AACH,eAHD,MAII;AAAChC,gBAAAA,KAAK,CAACsB,CAAD,CAAL,CAASH,KAAT,GAAiBa,SAAjB;AAA2B;AACnC;AACJ,WATD,MASO;AACHpB,YAAAA,QAAQ,CAACF,SAAS,IAAIR,QAAQ,CAACgB,IAAT,GAAgBV,WAApB,CAAV,CAAR;AACH;;AACDN,UAAAA,QAAQ,CAACgB,IAAT,GAAgBV,WAAhB;AACH;AACJ;;AACDL,MAAAA,WAAW,CAACH,KAAK,CAACI,MAAM,GAAG,CAAV,CAAN,CAAX;AACA,UAAI6B,MAAM,GAAGjC,KAAK,CAACI,MAAD,CAAlB;;AACA,UAAI6B,MAAM,KAAKlB,SAAf,EAA0B;AACtBkB,QAAAA,MAAM,CAACC,MAAP,GAAgB,KAAhB,CADsB,CAEtB;AACH;;AACD,UAAIhC,QAAQ,KAAKa,SAAjB,EAA4B;AACxBb,QAAAA,QAAQ,CAACgC,MAAT,GAAkB,IAAlB;AACH;AACJ;AACJ,GAtCQ,EAsCN,CAACpC,SAAD,CAtCM,CAAT;AAwCAlB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAImB,OAAJ,EAAa;AACT,UAAGK,MAAM,KAAK,CAAd,EAAgB;AACZV,QAAAA,MAAM,CAACyC,QAAP,CAAgBC,MAAhB;AACH;;AACD/B,MAAAA,SAAS,CAAC0B,SAAS,IAAKA,SAAS,GAAG,CAAZ,GAAgBA,SAAS,GAAG,CAA5B,GAAgCA,SAA/C,CAAT;AACA5B,MAAAA,WAAW,CAACH,KAAK,CAACI,MAAM,GAAG,CAAV,CAAN,CAAX;AACA,UAAI6B,MAAM,GAAGjC,KAAK,CAACI,MAAD,CAAlB;;AACA,UAAI6B,MAAM,KAAKlB,SAAf,EAA0B;AACtBkB,QAAAA,MAAM,CAACC,MAAP,GAAgB,KAAhB;AACH;;AACD,UAAIhC,QAAQ,KAAKa,SAAjB,EAA4B;AACxBb,QAAAA,QAAQ,CAACgC,MAAT,GAAkB,IAAlB;AACH;AACJ;AACJ,GAfQ,EAeN,CAACnC,OAAD,CAfM,CAAT;;AAkBA,QAAMsC,SAAS,GAAG,CAAC;AAACC,IAAAA,MAAD;AAASC,IAAAA;AAAT,GAAD,KAAuC;AACrD;AACA,QAAIA,WAAW,KAAKxB,SAAhB,IAA6BwB,WAAW,KAAK,IAA7C,IACAA,WAAW,CAACC,KAAZ,GAAoBF,MAAM,CAACE,KAA3B,IAAoCD,WAAW,CAACC,KAAZ,IAAqBpC,MAD7D,EACqE,OAAO,IAAP,CAHhB,CAIrD;;AACA,QAAImC,WAAW,CAACC,KAAZ,KAAsBF,MAAM,CAACE,KAAjC,EAAwC,OAAO,IAAP,CALa,CAMrD;AACA;;AACA,UAAMC,OAAO,GAAGzC,KAAK,CAAC0C,MAAN,CAAa,CAACC,CAAD,EAASC,GAAT,KAAyBA,GAAG,KAAKN,MAAM,CAACE,KAArD,CAAhB,CARqD,CASrD;;AACAC,IAAAA,OAAO,CAACI,MAAR,CAAeN,WAAW,CAACC,KAA3B,EAAkC,CAAlC,EAAqCxC,KAAK,CAACsC,MAAM,CAACE,KAAR,CAA1C,EAVqD,CAWrD;;AACAvC,IAAAA,QAAQ,CAACwC,OAAD,CAAR;AACH,GAbD;;AAeA,QAAMK,UAAU,GAAG,MAAY;AAC3B7D,IAAAA,QAAQ,GACH8D,IADL,CACU,CAAC;AAACC,MAAAA,IAAI,EAAE;AAAChD,QAAAA;AAAD;AAAP,KAAD,KAAoCC,QAAQ,CAACD,KAAD,CADtD,EAEKiD,KAFL,CAEYC,GAAD,IAAgBC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAF3B;AAGH,GAJD;;AAKAtE,EAAAA,SAAS,CAAC,MAAM;AACZkE,IAAAA,UAAU;AACb,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACI,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAET,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAM,IAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,WAAW,EAAC,OAAvB;AAA+B,IAAA,cAAc,EAAE,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKgB,QAAQ,IAAI;AACT,UAAMC,KAAK,GAAG;AACV;AACAC,MAAAA,KAAK,EAAE,OAFG;AAGV,SAAGF,QAAQ,CAACG;AAHF,KAAd;AAKA,wBACI;AAAI,MAAA,SAAS,EAAC;AAAd,OACQH,QAAQ,CAACG,cADjB;AACiC,MAAA,GAAG,EAAEH,QAAQ,CAACI,QAD/C;AACyD,MAAA,KAAK,EAAEH,KADhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAEKtD,KAAK,CAAC0D,GAAN,CAAU,CAAC9B,IAAD,EAAcY,KAAd,kBACP,oBAAC,QAAD;AACI,MAAA,GAAG,EAAEZ,IAAI,CAAC+B,GADd;AAEI,MAAA,IAAI,EAAE/B,IAFV;AAGI,MAAA,KAAK,EAAEY,KAHX;AAII,MAAA,MAAM,EAAEA,KAAK,KAAKpC,MAJtB;AAKI,MAAA,IAAI,EAAEoC,KAAK,IAAIpC,MAAM,GAAG,CAL5B;AAMI,MAAA,mBAAmB,EAAES,YANzB;AAOI,MAAA,OAAO,EAAEc,UAAU,CAACC,IAAD,CAPvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CAFL,EAaKyB,QAAQ,CAACO,WAbd,CADJ;AAgBH,GAvBL,CADJ,eA0BI,oBAAC,SAAD;AACI,IAAA,IAAI,EAAEjD,SADV;AACqB,IAAA,MAAM,EAAEP,MAAM,KAAKJ,KAAK,CAACqB,MAD9C;AACsD,IAAA,IAAI,EAAEjB,MAAM,KAAKJ,KAAK,CAACqB,MAAN,GAAe,CADtF;AAEI,IAAA,OAAO,EAAEV,SAAS,IAAIc,QAAQ,GAAGd,SAAf,CAAT,GAAqC,GAFlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1BJ,CADJ,eA+BI;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA/BJ,CADJ,CADJ;AAqCH,CAjMD;;AAmMA,eAAed,GAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport TodoItem from './components/TodoItem'\r\nimport {DragDropContext, Droppable, DropResult} from 'react-beautiful-dnd'\r\nimport {getTodos,} from './API'\r\nimport BonusItem from \"./components/BonusItem\";\r\n\r\nconst useKeyPress = function(targetKey: string) {\r\n    const [keyPressed, setKeyPressed] = useState(false);\r\n\r\n    function downHandler({ key }: { key: string }) {\r\n        if (key === targetKey) {\r\n            setKeyPressed(true);\r\n        }\r\n    }\r\n    const upHandler = ({ key }: { key: string }) => {\r\n        if (key === targetKey) {\r\n            setKeyPressed(false);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        window.addEventListener(\"keydown\", downHandler);\r\n        window.addEventListener(\"keyup\", upHandler);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", downHandler);\r\n            window.removeEventListener(\"keyup\", upHandler);\r\n        };\r\n    });\r\n\r\n    return keyPressed;\r\n};\r\n\r\nconst App: React.FC = () => {\r\n\r\n    const downPress = useKeyPress(\"ArrowDown\");\r\n    const upPress = useKeyPress(\"ArrowUp\");\r\n\r\n    const [todos, setTodos] = useState<ITodo[]>([]);\r\n    const [selected, setSelected] = useState<ITodo>();\r\n    const [cursor, setCursor] = useState<number>(-1);\r\n    // const [totalOver, setOver] = useState<number>(0);\r\n\r\n    const [realTime, setTime] = useState<number>(0);\r\n    const [nonZeroTime, setZero] = useState<number>(0);\r\n\r\n    let origBonus = 0;\r\n    const [bonusTime, setBonus] = useState<number>(origBonus);\r\n\r\n    const timeCallback = (timerTime: number) => {\r\n        if(timerTime != 0){setZero(timerTime)}\r\n        setTime(timerTime);\r\n    }\r\n    useEffect(() => {\r\n        if (selected !== undefined) {\r\n            //if person goes overtime\r\n            if (realTime > Math.round(selected.time - selected.extra)) {\r\n                //increase selected.overtime so their box increases in size\r\n                selected.overtime = (realTime - Math.round(selected.time - selected.extra));\r\n                //decrease other slots if bonusTime == 0\r\n                if (bonusTime < 1) {\r\n                    let length = cursor+1+selected.overtime >= todos.length ? todos.length: cursor + 1 + selected.overtime\r\n                    for (let i = cursor +selected.overtime ; i < length; i++) {\r\n                        todos[i].extra +=1;\r\n                    }\r\n\r\n                    // for (let i = cursor + 1; i < todos.length; i++) {\r\n                    //     todos[i].extra += 1 / (todos.length - cursor - 1);\r\n                    // }\r\n                } else{ //decrease bonusTime\r\n                    setBonus(origBonus-totalOver <0 ? 0 : origBonus - totalOver)\r\n                }\r\n            }\r\n        }\r\n    })\r\n    const getTodoTime = (): number => {\r\n        let todoTime = 0;\r\n        for (let i = 0; i < todos.length; i++) {\r\n            todoTime += todos[i].time;\r\n        }\r\n        return todoTime;\r\n    }\r\n    const getTotalOver = (): number => {\r\n        let totalOver = 0;\r\n        for (let i = 0; i < todos.length; i++) {\r\n            totalOver += todos[i].overtime;\r\n        }\r\n        return totalOver;\r\n    }\r\n\r\n    const getPercent = (todo: ITodo): number => {\r\n        return (todo.time + todo.overtime - todo.extra) / (todoTime) * 100\r\n    }\r\n\r\n    const isSlotDecreased = (): boolean => {\r\n        for (let i = cursor + 1; i < todos.length; i++) {\r\n            if(todos[i].extra>0){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    let todoTime = getTodoTime();\r\n    let totalOver = getTotalOver();\r\n    let slotDecreased = isSlotDecreased();\r\n\r\n\r\n    useEffect(() => {\r\n        if (downPress) {\r\n            // setTime(0);\r\n            if (cursor < todos.length) {\r\n                setCursor(prevState =>\r\n                    prevState < todos.length ? prevState + 1 : prevState)\r\n            } else {\r\n                setCursor(todos.length + 1);\r\n            }\r\n            if(selected !== undefined) {\r\n                //if person takes less than set time\r\n                if (nonZeroTime < selected.time) {\r\n                    //increase subsequent slots that are under time (until they are back to their set times)\r\n                    if (slotDecreased) {\r\n                        for (let i = cursor + 1; i < todos.length; i++) {\r\n                            let addedTime = todos[i].extra - (selected.time - nonZeroTime) / (todos.length - cursor - 1);\r\n                            if(addedTime <= 0){\r\n                                todos[i].extra = 0\r\n                                setBonus(origBonus - (addedTime));\r\n                            }\r\n                            else{todos[i].extra = addedTime}\r\n                        }\r\n                    } else {\r\n                        setBonus(origBonus + (selected.time - nonZeroTime));\r\n                    }\r\n                    selected.time = nonZeroTime;\r\n                }\r\n            }\r\n            setSelected(todos[cursor + 1]);\r\n            let before = todos[cursor];\r\n            if (before !== undefined) {\r\n                before.status = false\r\n                // if(before.overtime > 0){ before.overtime -= 1}\r\n            }\r\n            if (selected !== undefined) {\r\n                selected.status = true\r\n            }\r\n        }\r\n    }, [downPress]);\r\n\r\n    useEffect(() => {\r\n        if (upPress) {\r\n            if(cursor === 0){\r\n                window.location.reload();\r\n            }\r\n            setCursor(prevState => (prevState > 0 ? prevState - 1 : prevState));\r\n            setSelected(todos[cursor - 1]);\r\n            let before = todos[cursor];\r\n            if (before !== undefined) {\r\n                before.status = false\r\n            }\r\n            if (selected !== undefined) {\r\n                selected.status = true\r\n            }\r\n        }\r\n    }, [upPress]);\r\n\r\n\r\n    const onDragEnd = ({source, destination}: DropResult) => {\r\n        // Make sure we have a valid destination\r\n        if (destination === undefined || destination === null ||\r\n            destination.index < source.index && destination.index <= cursor) return null\r\n        // Make sure we're actually moving the item\r\n        if (destination.index === source.index) return null\r\n        // Move the item within the list\r\n        // Start by making a new list without the dragged item\r\n        const newList = todos.filter((_: any, idx: number) => idx !== source.index)\r\n        // Then insert the item at the right location\r\n        newList.splice(destination.index, 0, todos[source.index])\r\n        // Update the list\r\n        setTodos(newList)\r\n    }\r\n\r\n    const fetchTodos = (): void => {\r\n        getTodos()\r\n            .then(({data: {todos}}: ITodo[] | any) => setTodos(todos))\r\n            .catch((err: Error) => console.log(err))\r\n    }\r\n    useEffect(() => {\r\n        fetchTodos();\r\n    }, [])\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <main className='App'>\r\n                <div className='test'>\r\n                    <Droppable droppableId='col-1' isDropDisabled={false}>\r\n                        {provided => {\r\n                            const style = {\r\n                                // height: (todoTime + totalOver)/(todoTime) + '%' ,\r\n                                color: 'black',\r\n                                ...provided.droppableProps,\r\n                            };\r\n                            return (\r\n                                <ul className=\"characters\"\r\n                                    {...provided.droppableProps} ref={provided.innerRef} style={style}>\r\n                                    {todos.map((todo: ITodo, index) => (\r\n                                        <TodoItem\r\n                                            key={todo._id}\r\n                                            todo={todo}\r\n                                            index={index}\r\n                                            active={index === cursor}\r\n                                            done={index <= cursor - 1}\r\n                                            callbackFromParent2={timeCallback}\r\n                                            percent={getPercent(todo)}\r\n                                        />\r\n                                    ))}\r\n                                    {provided.placeholder}\r\n                                </ul>)\r\n                        }}\r\n                    </Droppable>\r\n                    <BonusItem\r\n                        time={bonusTime} active={cursor === todos.length} done={cursor === todos.length + 1}\r\n                        percent={bonusTime / (todoTime + bonusTime) * 100}/>\r\n                </div>\r\n                <button className=\"button\"> Settings</button>\r\n            </main>\r\n        </DragDropContext>\r\n    )\r\n}\r\n\r\nexport default App\r\n"]},"metadata":{},"sourceType":"module"}