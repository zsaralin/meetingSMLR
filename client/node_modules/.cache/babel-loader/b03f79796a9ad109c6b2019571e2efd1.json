{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Saralin\\\\IdeaProjects\\\\fullstack-typescript-mern-todo\\\\client\\\\src\\\\components\\\\Presenter.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport './cssFiles/Presenter.css';\nimport './cssFiles/DiagonalCrossOut.css';\nimport Timer from \"./Timer\";\nimport Slider from \"./Slider\";\nimport Trashcan from \"./Trashcan\";\n\nconst Presenter = props => {\n  const [realTime, setTime] = useState(0);\n  let reducedTime = props.presenter.time - props.presenter.extra;\n  let divValue = props.debug ? 1000 : 60;\n  console.log('DIvvalue' + divValue); //colour constants\n\n  let DARK_GREY = 'rgb(230,230,230)'; //darker grey\n\n  let LIGHT_GREY = 'rgb(240,240,240)'; //light grey\n  //display constants\n\n  let disReducedTime = Math.ceil(reducedTime / divValue);\n  let disTime = Math.ceil(props.presenter.time / divValue);\n  let disInitTime = Math.ceil(props.presenter.initTime / divValue); //approximate width of trashcan\n\n  let TRASH_WIDTH = '17.5%'; //max width of name component for all presenters\n\n  let MAX_NAME_WIDTH = 90 + 6 * props.longestName; //set time using time from Timer class\n\n  const timeCallback = timerTime => {\n    setTime(timerTime);\n  }; //send time of presenter to App class\n\n\n  useEffect(() => {\n    props.callbackFromParent(realTime);\n  }, [realTime]); //returns color to indicate how much of the designated time was used\n\n  function getColor() {\n    const diff = realTime - props.presenter.time; //less than or equal to designated time + 1 minute\n\n    if (realTime <= props.presenter.time + divValue) {\n      return 'rgb(198,246,241)';\n    } else if (props.bonusTime > 0) {\n      if (diff > 4) {\n        //overtime\n        return 'rgb(254,188,254)';\n      }\n\n      if (diff > 1) {\n        //slightly overtime\n        return 'rgb(255,202,255)';\n      } //overtime and no more bonus time (cutting into people's time)\n\n    } else if (props.bonusTime < 1) {\n      return 'rgb(252,190,236)';\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Draggable, {\n    draggableId: props.presenter._id,\n    index: props.index,\n    isDragDisabled: props.done || props.active || !props.admin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, provided => {\n    const style = {\n      height: props.height + '%',\n      ...provided.draggableProps.style,\n      color: props.done ? 'grey' : '' //grey text when presenter is done\n\n    };\n    return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n      className: \"card\",\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Slider, {\n      start: props.active,\n      time: realTime < reducedTime ? reducedTime : 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: realTime < props.presenter.time ? \"cardForward cardWrap\" : props.bonusTime > 0 ? \"cardReverse cardWrap\" : \"cardReverseNoBonus cardWrap\",\n      style: {\n        //gradient is paused when presenter is not active\n        animationPlayState: props.active ? 'running' : 'paused',\n        //presenter gradient, transition to darker pink (when cutting into other presenters' time)\n        animationDuration: reducedTime + 'ms, .5s'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"name\",\n      style: {\n        textDecoration: props.done ? 'line-through' : 'none',\n        //ensure same width for name section of all presenters\n        width: MAX_NAME_WIDTH + \"px\",\n        backgroundColor: props.done ? getColor() : !props.active ? LIGHT_GREY : '',\n        textIndent: !props.admin ? TRASH_WIDTH : '' //create index where trashcan usually is\n\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Trashcan, {\n      active: props.active,\n      done: props.done,\n      admin: props.admin,\n      _id: props.presenter._id,\n      index: props.index,\n      deletePres: props.deletePresApp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 33\n      }\n    }), props.presenter.name), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"description\",\n      style: {\n        textDecoration: props.done ? 'line-through' : 'none',\n        backgroundColor: props.done ? LIGHT_GREY : !props.active ? DARK_GREY : ''\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 29\n      }\n    }, props.presenter.description), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"time\",\n      style: {\n        backgroundColor: props.done ? LIGHT_GREY : !props.active ? DARK_GREY : ''\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"setTime\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 33\n      }\n    }, disTime < disInitTime ?\n    /*#__PURE__*/\n    //time is greater than initial time\n    React.createElement(\"span\", {\n      style: {\n        display: 'inline'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"crossedOut\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 41\n      }\n    }, disInitTime), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 45\n      }\n    }, \" \", disTime)) : props.active ? disReducedTime : disInitTime, \" min\"), /*#__PURE__*/React.createElement(Timer, {\n      callbackFromParent: timeCallback,\n      active: props.active,\n      done: props.done,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 33\n      }\n    }))));\n  });\n};\n\nexport default Presenter;","map":{"version":3,"sources":["C:/Users/Saralin/IdeaProjects/fullstack-typescript-mern-todo/client/src/components/Presenter.tsx"],"names":["React","useEffect","useState","Draggable","Timer","Slider","Trashcan","Presenter","props","realTime","setTime","reducedTime","presenter","time","extra","divValue","debug","console","log","DARK_GREY","LIGHT_GREY","disReducedTime","Math","ceil","disTime","disInitTime","initTime","TRASH_WIDTH","MAX_NAME_WIDTH","longestName","timeCallback","timerTime","callbackFromParent","getColor","diff","bonusTime","_id","index","done","active","admin","provided","style","height","draggableProps","color","innerRef","dragHandleProps","animationPlayState","animationDuration","textDecoration","width","backgroundColor","textIndent","deletePresApp","name","description","display"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport {Draggable} from 'react-beautiful-dnd'\r\n\r\nimport './cssFiles/Presenter.css';\r\nimport './cssFiles/DiagonalCrossOut.css'\r\n\r\nimport Timer from \"./Timer\";\r\nimport Slider from \"./Slider\";\r\nimport Trashcan from \"./Trashcan\";\r\n\r\nconst Presenter = (props: {\r\n    presenter: IPresenter, height: number,\r\n    active: boolean, done: boolean, admin: boolean,\r\n    index: number, bonusTime: number, longestName: number,\r\n    callbackFromParent(parentTime: number): void,\r\n    deletePresApp: (_id: string, index: number) => void,\r\n    debug:boolean,\r\n}) => {\r\n    const [realTime, setTime] = useState<number>(0);\r\n    let reducedTime = props.presenter.time - props.presenter.extra\r\n    let divValue = props.debug ? 1000:60;\r\n    console.log('DIvvalue' + divValue);\r\n    //colour constants\r\n    let DARK_GREY = 'rgb(230,230,230)' //darker grey\r\n    let LIGHT_GREY = 'rgb(240,240,240)' //light grey\r\n\r\n    //display constants\r\n    let disReducedTime = Math.ceil(reducedTime / divValue);\r\n    let disTime = Math.ceil(props.presenter.time / divValue);\r\n    let disInitTime = Math.ceil(props.presenter.initTime / divValue);\r\n\r\n    //approximate width of trashcan\r\n    let TRASH_WIDTH = '17.5%';\r\n    //max width of name component for all presenters\r\n    let MAX_NAME_WIDTH = 90 + 6 * props.longestName;\r\n\r\n    //set time using time from Timer class\r\n    const timeCallback = (timerTime: number) => {\r\n        setTime(timerTime);\r\n    }\r\n\r\n    //send time of presenter to App class\r\n    useEffect(() => {\r\n        props.callbackFromParent(realTime)\r\n    }, [realTime])\r\n\r\n    //returns color to indicate how much of the designated time was used\r\n    function getColor() {\r\n        const diff = realTime - props.presenter.time\r\n        //less than or equal to designated time + 1 minute\r\n        if (realTime <= props.presenter.time + divValue) {\r\n            return 'rgb(198,246,241)';\r\n        } else if (props.bonusTime > 0) {\r\n            if (diff > 4) { //overtime\r\n                return 'rgb(254,188,254)';\r\n            }\r\n            if (diff > 1) { //slightly overtime\r\n                return 'rgb(255,202,255)';\r\n            }\r\n            //overtime and no more bonus time (cutting into people's time)\r\n        } else if (props.bonusTime < 1) {\r\n            return 'rgb(252,190,236)';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Draggable draggableId={props.presenter._id} index={props.index}\r\n                   isDragDisabled={props.done || props.active || !props.admin}>\r\n            {provided => {\r\n                const style = {\r\n                    height: props.height + '%', ...provided.draggableProps.style,\r\n                    color: props.done ? 'grey' : '', //grey text when presenter is done\r\n                };\r\n                return (\r\n                    <div className=\"card\" ref={provided.innerRef}\r\n                         {...provided.draggableProps}\r\n                         {...provided.dragHandleProps} style={style}>\r\n                        <Slider start={props.active}\r\n                                time={(realTime < reducedTime) ? reducedTime : 0}/>\r\n                        <div\r\n                            className={(realTime < props.presenter.time) ? \"cardForward cardWrap\" : props.bonusTime > 0 ?\r\n                                \"cardReverse cardWrap\" : \"cardReverseNoBonus cardWrap\"}\r\n                            style={{\r\n                                //gradient is paused when presenter is not active\r\n                                animationPlayState: props.active ? 'running' : 'paused',\r\n                                //presenter gradient, transition to darker pink (when cutting into other presenters' time)\r\n                                animationDuration: reducedTime + 'ms, .5s',\r\n                            }}>\r\n                            <div className='name'\r\n                                 style={{\r\n                                     textDecoration: props.done ? 'line-through' : 'none',\r\n                                     //ensure same width for name section of all presenters\r\n                                     width: MAX_NAME_WIDTH + \"px\",\r\n                                     backgroundColor: props.done ? getColor() : !props.active ? LIGHT_GREY : '',\r\n                                     textIndent: !props.admin ? TRASH_WIDTH : '', //create index where trashcan usually is\r\n                                 }}>\r\n                                <Trashcan active={props.active} done={props.done} admin={props.admin} _id = {props.presenter._id}\r\n                                          index = {props.index} deletePres={props.deletePresApp}/>\r\n                                {props.presenter.name}\r\n                            </div>\r\n                            <div className='description' style={{\r\n                                textDecoration: props.done ? 'line-through' : 'none',\r\n                                backgroundColor: props.done ? LIGHT_GREY : !props.active ? DARK_GREY : '',\r\n                            }}>{props.presenter.description}\r\n                            </div>\r\n                            <div className=\"time\" style={{\r\n                                backgroundColor: props.done ? LIGHT_GREY : !props.active ? DARK_GREY : '',\r\n                            }}>\r\n                                <div className=\"setTime\">\r\n                                    {disTime < disInitTime ? //time is greater than initial time\r\n                                        <span style={{display: 'inline'}}>\r\n                                        <span className=\"crossedOut\">\r\n                                            {disInitTime}</span>\r\n                                            <span> {disTime}</span>\r\n                                        </span> : props.active ? disReducedTime\r\n                                            : disInitTime} min\r\n                                </div>\r\n                                <Timer callbackFromParent={timeCallback} active={props.active} done={props.done}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }}\r\n        </Draggable>\r\n    )\r\n}\r\nexport default Presenter\r\n"]},"metadata":{},"sourceType":"module"}