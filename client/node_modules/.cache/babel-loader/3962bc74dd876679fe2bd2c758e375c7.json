{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Saralin\\\\IdeaProjects\\\\fullstack-typescript-mern-todo\\\\client\\\\src\\\\components\\\\BonusItem.tsx\";\nimport React, { useState } from 'react';\nimport './BonusItem.css';\nimport Timer from \"./Timer\";\nimport Slider from \"./Slider\";\n\nfunction BonusItem(props) {\n  const [realTime, setTime] = useState(0);\n\n  const myCallback = time => {\n    setTime(time);\n  }; //returns color to indicate how much of the designated bonus time was used\n\n\n  function getColor() {\n    const diff = realTime - props.time;\n\n    if (diff > 4) {\n      //overtime\n      return 'rgb(255,125,255)';\n    } else if (diff > 1) {\n      //slightly overtime\n      return 'rgb(255,202,255)';\n    } else {\n      //undertime\n      return 'rgb(160,240,232)';\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bottomPanel\",\n    style: {\n      height: props.percent + '%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Slider, {\n    start: props.active,\n    time: props.time,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: realTime < props.time ? \"bonusForward bonusWrap\" : \"bonusReverse bonusWrap\",\n    style: {\n      animationDuration: props.time + 'ms',\n      animationPlayState: props.active ? 'running' : 'paused',\n      background: props.done ? getColor() : '',\n      textDecoration: props.done ? 'grey line-through' : 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bonus\",\n    style: {\n      textIndent: props.percent < 6.25 ? '-9999px' : '',\n      background: !props.active && !props.done ? 'rgb(245, 245, 245)' : ''\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }, \"Bonus Time\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bonusTime\",\n    style: {\n      display: props.percent < 6.25 ? 'none' : '',\n      overflow: 'hidden',\n      color: \"grey\",\n      textDecoration: props.done ? 'grey line-through' : 'none',\n      background: !props.active && !props.done ? 'rgb(245, 245, 245)' : ''\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"setBonus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }\n  }, Math.ceil(props.origBonus / 1000) !== Math.ceil(props.time / 1000) ? /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: 'inline'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"crossedOut\" // style={{\n    //     color: 'grey',\n    //     opacity: '70%',\n    //     display: 'inline',\n    //     marginRight: '4px'\n    // }}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 41\n    }\n  }, Math.ceil(props.origBonus / 1000)), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 45\n    }\n  }, \" \", Math.ceil(props.time / 1000))) : Math.ceil(props.origBonus / 1000), \" min\", /*#__PURE__*/React.createElement(Timer, {\n    callbackFromParent: myCallback,\n    active: props.active,\n    done: props.done,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  })))));\n}\n\nexport default BonusItem;","map":{"version":3,"sources":["C:/Users/Saralin/IdeaProjects/fullstack-typescript-mern-todo/client/src/components/BonusItem.tsx"],"names":["React","useState","Timer","Slider","BonusItem","props","realTime","setTime","myCallback","time","getColor","diff","height","percent","active","animationDuration","animationPlayState","background","done","textDecoration","textIndent","display","overflow","color","Math","ceil","origBonus"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\r\nimport './BonusItem.css'\r\nimport Timer from \"./Timer\";\r\nimport Slider from \"./Slider\";\r\n\r\nfunction BonusItem(props: { origBonus: number, time: number, active: boolean, done: boolean, percent: number }) {\r\n    const [realTime, setTime] = useState<number>(0);\r\n\r\n    const myCallback = (time: number) => {\r\n        setTime(time);\r\n    }\r\n\r\n    //returns color to indicate how much of the designated bonus time was used\r\n    function getColor() {\r\n        const diff = realTime - props.time\r\n        if (diff > 4) { //overtime\r\n            return 'rgb(255,125,255)';\r\n        } else if (diff > 1) { //slightly overtime\r\n            return 'rgb(255,202,255)';\r\n        } else { //undertime\r\n            return 'rgb(160,240,232)';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"bottomPanel\" style={{\r\n            height: props.percent + '%'\r\n        }}>\r\n            <Slider start={props.active} time={props.time}/>\r\n            <div className={(realTime < props.time) ? \"bonusForward bonusWrap\" : \"bonusReverse bonusWrap\"}\r\n                 style={{\r\n                     animationDuration: props.time + 'ms',\r\n                     animationPlayState: props.active ? 'running' : 'paused',\r\n                     background: props.done ? getColor() : '',\r\n                     textDecoration: props.done ? 'grey line-through' : 'none',\r\n                 }}>\r\n                <div className=\"bonus\" style={{\r\n                    textIndent: props.percent < 6.25 ? '-9999px' : '',\r\n                    background: !props.active && !props.done ? 'rgb(245, 245, 245)' : '',\r\n                }}>Bonus Time\r\n                </div>\r\n                <div className=\"bonusTime\" style={{\r\n                    display: props.percent < 6.25 ? 'none' : '',\r\n                    overflow: 'hidden',\r\n                    color: \"grey\", textDecoration: props.done ? 'grey line-through' : 'none',\r\n                    background: !props.active && !props.done ? 'rgb(245, 245, 245)' : '',\r\n                }}>\r\n                    <div className=\"setBonus\">\r\n                        {Math.ceil(props.origBonus / 1000) !== Math.ceil(props.time / 1000) ?\r\n                            <span style={{display: 'inline'}}>\r\n                                        <span className=\"crossedOut\"\r\n                                              // style={{\r\n                                              //     color: 'grey',\r\n                                              //     opacity: '70%',\r\n                                              //     display: 'inline',\r\n                                              //     marginRight: '4px'\r\n                                              // }}\r\n                                        >\r\n                                            {Math.ceil(props.origBonus / 1000)}</span>\r\n                                            <span> {Math.ceil(props.time / 1000)}</span>\r\n                                        </span> : Math.ceil(props.origBonus / 1000)} min\r\n                        <Timer callbackFromParent={myCallback} active={props.active} done={props.done}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default BonusItem"]},"metadata":{},"sourceType":"module"}